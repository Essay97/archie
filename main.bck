use std::{collections::HashMap, fs::File};

use clap::{Parser, Subcommand};
use serde::{de::value, Deserialize};

#[derive(Parser)]
#[command(author, version, about, long_about = None)]
struct Cli {
    #[command(subcommand)]
    command: Commands,
}

#[derive(Subcommand)]
enum Commands {
    /// Build folder structure
    Build { structure: String },
}

fn main() {
    /* let cli = Cli::parse();

    match cli.command {
        Commands::Build { structure } => {
            println!("{structure}")
        }
    } */
    let pwd = std::env::current_dir().expect("PWD not found");
    println!("{}", pwd.display());
    get_list();
}

#[derive(Deserialize)]
struct Config {
    templates: HashMap<String, Template>,
}

#[derive(Deserialize)]
enum Node {
    FileNode(String),
    FolderNode(HashMap<String, Box<Template>>),
}

type Template = Vec<Node>;

fn get_template(name: &String) /* -> Option<Template> */
{
    let config_file = File::open("examples/config/.archierc.yaml").unwrap();
    let config: Config = serde_yaml::from_reader(config_file).expect("Could not deserialize value");
}

type List = Vec<String>;

fn get_list() {
    let f = File::open("examples/list.yaml").unwrap();
    let list: List = serde_yaml::from_reader(f).expect("Could not load list");

    println!("{:?}", list)
}
